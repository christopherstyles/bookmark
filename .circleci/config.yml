# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/ruby:2.4.2-node-browsers
        environment:
          RAILS_ENV: test
          PGHOST: 127.0.0.1
          DATABASE_URL: postgres://root:circle_test@localhost:5432/bookmark_manager_test
          CC_TEST_REPORTER_ID: <%= ENV['CC_TEST_REPORTER_ID'] %>

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: circleci/postgres:9.6-alpine
        POSTGRES_DB: bookmark-manager-test
        POSTGRES_USER: bookmark-manager-user


    working_directory: ~/bookmark-manager

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - bookmark-manager-{{ checksum "Gemfile.lock" }}
          # fallback to using the latest cache if no exact match is found
          - bookmark-manager-

      - run:
          name: install dependencies
          command: |
            bundle install --without development --jobs=4 --retry=3 --path vendor/bundle

      - run:
          name: Setup Code Climate test-reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter

      - save_cache:
          paths:
            - ./venv
          key: bookmark-manager-{{ checksum "Gemfile.lock" }}

      # Database setup
      - run: bundle exec rake db:create
      - run: bundle exec rake db:schema:load

      # run tests!
      - run:
          name: run tests
          command: |
            ./cc-test-reporter before-build
            bundle exec rspec --format progress \
                            --format RspecJunitFormatter \
                            --out /tmp/test-results/rspec.xml \
                            --format progress
            ./cc-test-reporter after-build --coverage-input-type simplecov --exit-code $?

      # collect reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

